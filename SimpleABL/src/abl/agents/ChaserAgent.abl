package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;
import java.util.Random;

// Imports are used the same way as in Java. Its necessary to import Sensor, Action, and WME classes.
/** 
 * A simple agent that moves towards the player and occassionally fires bullets.
 *
 * @author Josh McCoy 1-23-2019
 * @author Ben Weber 3-7-11
 */ 
behaving_entity ChaserAgent {
// This defines a name for the agent 

	/** 
	 * Define the physicals actions that the agent can perform. The definition includes an action prototype and
	 * and an action class name. The class name must be a Java class which has been imported. 
	 *
	 * The prototype parameters correspond to the types expected by the execute(object[]) method 
	 * in the action's Java class.
	 */
	register act moveUp(int) with MoveUp;
	register act moveDown(int) with MoveDown; 
	register act moveLeft(int) with MoveLeft;
	register act moveRight(int) with MoveRight;
	register act moveTo(int, int, int) with Move;
	register act stop(int) with Stop;
	register act fire(int, int, int, int) with Fire;
	register act setColor(int, int, int, int) with SetColor;
	register act spawnBot(int, int) with SpawnBot;

	/**
	 * Define the sensors that add game state to working memory. Each sensor defines the name of the WME class
	 * that it is responsible for managing and the Java sensor class that implements the functionality. 
	 */
    register wme PlayerWME with PlayerSensor;
    register wme BotWME with BotSensor;

	/**
	 * Defines a variable scope to the agent, which can be used and modified in behaviors. 
	 *
	 * It is also possible to use constants from a Java interface (e.g.):
     * constants game.Constants;   
	 */ 
	int botSpeed = 50;
	
	/**
	 * overall firing manager
	 */
	 sequential behavior superFiring() {
	    subgoal manageFiring(0);
    	subgoal manageFiring(4);
    	subgoal manageFiring(8);
    	subgoal manageFiring(12);
	 }

	/**
	 * After an initial delay, continuously fire bullets. 
	 */
	sequential behavior manageFiring(int botid) {
		subgoal Wait(5000);					// this suspends the execution of the behavior
		with (persistent) subgoal fire(botid);
		subgoal Wait(1000);
	}

    /**
     * Fires a bullet at the player character using the bot position at the source and the player position as the target
     *
     * Each fire action is followed by a cooldown period. 
     */
	sequential behavior fire(int botid) {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)	// locationX invokes PlayerMWE.getLocationX() 
			(BotWME locationX::botX locationY::botY id::id1)   // :: is used to bind properties to behavior scoped variables
			(id1 == botid)
		}
        
        int rando = 0;
        
        mental_act {
            Random rand = new Random();

            // Obtain a number between [0 - 49].
            rando = rand.nextInt(3000);
            rando += 2000;
        }
		act fire(botX, botY, playerX, playerY);	
		subgoal Wait(rando);
	}
	
	
	/**
	 * Manage bot color.
	 */
	 
	sequential behavior manageColor(int R, int B, int G, int id) {
	    precondition  {
	        (BotWME id::id1)
	        (id == id1)
	    }
		subgoal setColor(R, B, G, id);
	}
	
	sequential behavior setColor(int R, int B, int G, int id) {
		precondition {
			(BotWME Red::botRed) 
			(BotWME Blue::botBlue) 
			(BotWME Green::botGreen)
			(botGreen != G && botRed != R && botBlue != B)
		}
		specificity 3;

		act setColor(R,B,G,id);
	}
	
	/**
	 * Spawn bots and moves with player - we visualize this as taunting/harassing the player
	 * Basically, the bots won't leave the player alone.
	 * As soon as the player tries to move out of the firing line,
	 * the bots follow it and keep throwing rocks.
	 */
	 
	 sequential behavior manageFormation() {
	     subgoal spawnFormation();
	     with (persistent) subgoal updateFormation();
	 }
	 
	 sequential behavior spawnFormation() {
	     precondition {
	         (PlayerWME locationY::playerY)
	         (PlayerWME locationX::playerX)
	     }
	     
	     int posY = 0;
	     int negY = 0;
	     int posX = 0;
	     int negX = 0;
	     
	     int posYplus = 0;
	     int posYminus = 0;
	     int negYplus = 0;
	     int negYminus = 0;
	     int posXplus = 0;
	     int posXminus = 0;
	     int negXplus = 0;
	     int negXminus = 0;
	     
	     mental_act {
	         posY = playerY + 120;
	         negY = playerY - 120;
	         posX = playerX + 180;
	         negX = playerX - 180;
	         
	         posYplus = posY + 10;
	         posYminus = posY - 10;
	         negYplus = negY + 10;
	         negYminus = negY - 10;
	         posXplus = posX + 10;
	         posXminus = posX - 10;
	         negXplus = negX + 10;
	         negXminus = negX - 10;
	     }

	     act spawnBot(negXplus, negY);
	     act setColor(220,20,60, 0);
	     act spawnBot(negXminus, negY);
	     act setColor(220,20,60, 1);
	     act spawnBot(negX, negYplus);
	     act setColor(220,20,60, 2);
	     act spawnBot(negX, negYminus);
	     act setColor(220,20,60, 3);
	     
	     act spawnBot(negXplus, posY);
	     act setColor(0,204,0, 4);
	     act spawnBot(negXminus, posY);
	     act setColor(0,204,0, 5);
	     act spawnBot(negX, posYplus);
	     act setColor(0,204,0, 6);
	     act spawnBot(negX, posYminus);
	     act setColor(0,204,0, 7);
	     
	     act spawnBot(posXplus, negY);
	     act setColor(178,102,255, 8);
	     act spawnBot(posXminus, negY);
	     act setColor(178,102,255, 9);
	     act spawnBot(posX, negYplus);
	     act setColor(178,102,255, 10);
	     act spawnBot(posX, negYminus);
	     act setColor(178,102,255, 11);
	     
	     act spawnBot(posXplus, posY);
	     act spawnBot(posXminus, posY);
	     act spawnBot(posX, posYplus);
	     act spawnBot(posX, posYminus);
	     
	 }
	 
	 sequential behavior updateFormation() {
	     precondition {
	         (PlayerWME locationY::playerY)
	         (PlayerWME locationX::playerX)
	     }
	     
	     specificity 3;
	     
	     int posY = 0;
	     int negY = 0;
	     int posX = 0;
	     int negX = 0;
	     
	     mental_act {
	         posY = playerY + 70;
	         negY = playerY - 70;
	         posX = playerX + 70;
	         negX = playerX - 70;
	     }

         subgoal updateGroupOne(negX, negY);
         subgoal updateGroupTwo(negX, posY);
	     subgoal updateGroupThree(posX, negY);
	     subgoal updateGroupFour(posX, posY);
	     
	     subgoal Wait(20);
	 }
	 
	 /**
	 * Update the positions of the red group - group1
	 */
	 sequential behavior updateGroupOne(int negX, int negY) {
	     
	     int negXplus = 0;
	     int negXminus = 0;
	     int negYplus = 0;
	     int negYminus = 0;
	     
	     int rando = 0;
        
         mental_act {
             Random rand = new Random();

             rando = rand.nextInt(50);
         }
	     
	     mental_act {
	         negY -= rando;
	         negX -= rando;
	         negYplus = negY + 10;
	         negYminus = negY - 10;
	         negXplus = negX + 10;
	         negXminus = negX - 10;
	     }
	     
	     subgoal moveTo(negXplus, negY, 0);
		 subgoal moveTo(negXminus, negY, 1);
		 subgoal moveTo(negX, negYplus, 2);
		 subgoal moveTo(negX, negYminus, 3);
	 
	 }
	 
	 /**
	 * Update the positions of the green group - group2
	 */
	 sequential behavior updateGroupTwo(int negX, int posY) {
	     
	     int negXplus = 0;
	     int negXminus = 0;
	     int posYplus = 0;
	     int posYminus = 0;
	     
	     int rando = 0;
        
         mental_act {
             Random rand = new Random();

             rando = rand.nextInt(50);
         }
	     
	     mental_act {
	         negX -= rando;
	         posY += rando;
	         posYplus = posY + 10;
	         posYminus = posY - 10;
	         negXplus = negX + 10;
	         negXminus = negX - 10;
	     }
	     
	     subgoal moveTo(negXplus, posY, 4);
	     subgoal moveTo(negXminus, posY, 5);
	     subgoal moveTo(negX, posYplus, 6);
	     subgoal moveTo(negX, posYminus, 7);
	 
	 }
	 
	 /**
	 * Update the positions of the lavender group - group3
	 */
	 sequential behavior updateGroupThree(int posX, int negY) {
	     
	     int posXplus = 0;
	     int posXminus = 0;
	     int negYplus = 0;
	     int negYminus = 0;
	     
	     int rando = 0;
        
         mental_act {
             Random rand = new Random();

             rando = rand.nextInt(50);
         }
	     
	     mental_act {
	         posX += rando;
	         negY -= rando;
	         negYplus = negY + 10;
	         negYminus = negY - 10;
	         posXplus = posX + 10;
	         posXminus = posX - 10;
	     }
	     
	     subgoal moveTo(posXplus, negY, 8);
	     subgoal moveTo(posXminus, negY, 9);
	     subgoal moveTo(posX, negYplus, 10);
	     subgoal moveTo(posX, negYminus, 11);
	 
	 }
	 
	 /**
	 * Update the positions of the orange group - group4
	 */
	 sequential behavior updateGroupFour(int posX, int posY) {
	     
	     int posXplus = 0;
	     int posXminus = 0;
	     int posYplus = 0;
	     int posYminus = 0;
	     
	     int rando = 0;
        
         mental_act {
             Random rand = new Random();

             rando = rand.nextInt(50);
         }
	     
	     mental_act {
	         posX += rando;
	         posY += rando;
	         posYplus = posY + 10;
	         posYminus = posY - 10;
	         posXplus = posX + 10;
	         posXminus = posX - 10;
	     }
	     
	     subgoal moveTo(posXplus, posY, 12);
	     subgoal moveTo(posXminus, posY, 13);
	     subgoal moveTo(posX, posYplus, 14);
	     subgoal moveTo(posX, posYminus, 15);
	 
	 }
	
	/**
	 * Moves the bot to target location.
	 */
	 
 	sequential behavior manageMoveTo(int X,int Y, int id) {
 		with (persistent) subgoal moveTo(X,Y, id);
 	}
 	
	sequential behavior moveTo(int X, int Y, int id) {
		precondition { 
			(BotWME locationX::botLocX id::id1)
			(BotWME locationY::botLocY id::id1)
			(id1 == id) 
		}
		specificity 4;
		
		if {((X < botLocX) && (botLocX < X) && (Y< botLocY) && (botLocY < Y))} {
		    act stop(id);
		    subgoal Wait(20);
		} else {
		    act moveTo(X, Y, id);
		    subgoal Wait(20);
		}

	}

	/**
	 * Continuously move towards the player character.
	 */
	sequential behavior manageMovement() {
		with (persistent) subgoal move();
	}

	/**
	 * Moves the bot up if the player is above the bot.
	 * 
	 * Note: The agent prefers vertical over horizonal movement, because the move up and move down behaviors have 
	 * a higher specificity than the other move behaviors. Therefore, if the agent needs to be moved up or down,
	 * they are chosen first. 
	 */ 
	
	sequential behavior move() {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationY::botY id::id) 
			(botY > (playerY + botSpeed))
		}
		specificity 3;
 
		act moveUp(id);
	}
 	
	/**
	 * Moves the bot down if the player is below the bot.
	 */
	sequential behavior move() {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationY::botY id::id) 
			(botY < (playerY - botSpeed))
		}
		specificity 3;

		act moveDown(id);
	}
 	 
	/**
	 * Moves the bot left if the player to the left of the bot.
	 */
	sequential behavior move() {
		precondition {
			(PlayerWME locationX::playerX)
			(BotWME locationX::botX id::id) 
			(botX > (playerX + botSpeed))
		}
		specificity 2;

		act moveLeft(id);
	}

	/**
	 * Moves the bot right if the player to the right of the bot.
	 */
	sequential behavior move() {
		precondition { 
			(PlayerWME locationX::playerX)
			(BotWME locationX::botX id::id) 
			(botX < (playerX - botSpeed))
		}
		specificity 2;

		act moveRight(id);
	}
	
	
	/**
	 * Stops the bot.
	 *
	 * Of the move behaviors, this is always evaluated last due to having the lowest specificity. 
	 * Since it is evaluated last, it is only reached if none of the other behaviors can be activited,
	 * which means the player and bot are overlapping. This is why there are no preconditions. 
	 */
	sequential behavior move() {
		precondition {
			(BotWME id::id)
		}
		specificity 1;
		act stop(id);
	}

    /**
     * Utility behavior for suspending the execution of a behavior.
     *
     * This behavior consist of two steps. First, the mental act compute the finishing time
     * based on the input delay. Second, the success tests waits until the condition check
     * evaluates to true.
     */
	sequential behavior Wait(int milliseconds) {
		long finish;
	    mental_act { 
	    	finish = System.currentTimeMillis() + milliseconds; 
	    }
	    
	    with ( success_test { (System.currentTimeMillis() > finish) } ) wait;
	}
 
    /** 
     * Root of the active behavior tree.
     *
     * Note: this is a parallel behavior.
     * Note: the ABL compiler expects this to be the last behavior defined in the agent. 
     * Note: prioirities are used to ensure all goals are pursued, since the move() goal can thrash in this simple example
     */
    initial_tree {
    	with (priority 3) mental_act {
			System.out.println("Starting bot Agent");
    	}
     	
    	with (priority 2) subgoal manageFiring(0);
    	with (priority 2) subgoal manageFiring(4);
    	with (priority 2) subgoal manageFiring(8);
    	with (priority 2) subgoal manageFiring(12);
        with (priority 3) subgoal manageFormation();
    }
}
